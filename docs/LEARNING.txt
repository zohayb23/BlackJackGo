GO CONCEPTS AND LEARNING DOCUMENTATION
====================================

This document tracks the Go concepts learned and implemented in the BlackJack project.

1. BASIC GO CONCEPTS
-------------------

a) Packages
   Definition: Packages are Go's unit of code organization and reuse
   Example from our code:
       package deck
   Key Terms:
   - package declaration
   - internal packages (private to project)
   - importing packages
   - package organization

b) Types
   Definition: Go's way of defining new types based on existing ones
   Example from our code:
       type Suit string
       type Rank string
   Key Terms:
   - type declaration
   - underlying type
   - type safety
   - custom types

c) Constants
   Definition: Values that cannot be modified after declaration
   Example from our code:
       const (
           Hearts   Suit = "Hearts"
           Diamonds Suit = "Diamonds"
       )
   Key Terms:
   - const keyword
   - constant blocks
   - typed constants
   - iota for enums

2. COMPOSITE TYPES
-----------------

a) Structs
   Definition: User-defined type that groups related data
   Example from our code:
       type Card struct {
           Suit Suit
           Rank Rank
       }
   Key Terms:
   - struct fields
   - field types
   - struct initialization
   - composition

b) Slices
   Definition: Dynamic arrays that can grow or shrink
   Example from our code:
       cards []Card
   Key Terms:
   - length (len)
   - capacity (cap)
   - append function
   - make function
   - slice operations

c) Maps
   Definition: Key-value data structures
   Example from our code:
       var suitSymbols = map[Suit]string{
           Hearts: "♥",
       }
   Key Terms:
   - key-value pairs
   - map initialization
   - map lookup
   - zero value (nil)
   - existence checking

3. FUNCTIONS AND METHODS
-----------------------

a) Regular Functions
   Definition: Reusable blocks of code
   Example from our code:
       func NewCard(suit Suit, rank Rank) (Card, error)
   Key Terms:
   - function declaration
   - parameters
   - return values
   - multiple returns
   - named returns

b) Methods
   Definition: Functions attached to types
   Example from our code:
       func (c Card) Value() int
   Key Terms:
   - receiver
   - method set
   - pointer receivers
   - value receivers
   - method chaining

4. ERROR HANDLING
----------------

Definition: Go's way of handling exceptional conditions
Example from our code:
    if _, ok := suitSymbols[suit]; !ok {
        return Card{}, fmt.Errorf("invalid suit: %s", suit)
    }
Key Terms:
- error interface
- multiple return values
- error checking
- fmt.Errorf
- error propagation

BLANK IDENTIFIER (_)
-------------------
Definition: The underscore (_) is a special identifier in Go called the blank identifier. 
It's used to explicitly ignore values that must be received but won't be used.

Common Uses:
1. Map lookups:
   value, ok := myMap[key]     // Get both value and existence
   _, ok := myMap[key]         // Only care about existence

2. Multiple return values:
   result, err := someFunction()  // Get both result and error
   _, err := someFunction()       // Only care about error

3. Range loops:
   for i, v := range slice {}    // Get both index and value
   for _, v := range slice {}    // Only care about value

4. Import side effects:
   import _ "package/name"       // Import for side effects only

Example from our code:
```go
if _, ok := suitSymbols[suit]; !ok {
    return Card{}, fmt.Errorf("invalid suit: %s", suit)
}
```
Here we only care if the suit exists in our map, not what symbol it maps to.

Key Points:
- Helps avoid compiler errors for unused variables
- Makes code intention clear - explicitly showing we're ignoring values
- Common in Go idioms and patterns
- Can be used in multiple places in the same statement

5. TESTING
----------

Definition: Go's built-in testing framework
Example from our code:
    func TestCardValue(t *testing.T)
Key Terms:
- test functions
- testing.T
- table-driven tests
- test coverage
- subtests
- test helpers

6. INPUT/OUTPUT
--------------

Definition: Handling user input and output
Example from our code:
    reader := bufio.NewReader(os.Stdin)
    input, _ := reader.ReadString('\n')
Key Terms:
- bufio.Reader
- os.Stdin/Stdout
- string formatting
- ANSI escape codes
- error handling

7. STATE MANAGEMENT
------------------

Definition: Tracking and managing program state
Example from our code:
    type GameState int
    const (
        WaitingToStart GameState = iota
        PlayerTurn
        DealerTurn
        RoundOver
    )
Key Terms:
- state enumeration
- state transitions
- iota usage
- encapsulation
- getter methods

8. USER INTERFACE
----------------

Definition: Command-line interface design
Example from our code:
    func getPlayerInput() string
Key Terms:
- command processing
- user prompts
- screen clearing
- formatted output
- input validation

9. DESIGN PATTERNS
-----------------

a) Constructor Pattern
   Definition: Functions that create and initialize types
   Example from our code:
       func NewDeck() *Deck

b) State Pattern
   Definition: Object behavior depends on its state
   Example from our code:
       - Game state management
       - Player state transitions

c) Command Pattern
   Definition: Encapsulate requests as objects
   Example from our code:
       - Command processing in main.go

PROGRESS TRACKER
---------------
[✓] Basic Go Setup
[✓] Card Implementation
[✓] Deck Implementation
[✓] Player Implementation
[✓] Game Logic
[✓] Game Rules
[✓] Command-line Interface

This document will continue to be updated as we add more features and learn new concepts. 

ESSENTIAL GO COMMANDS
-------------------
Here are the most important Go commands you'll need:

1. Running the Program:
   go run cmd/main.go               // Run the main program
   go build cmd/main.go            // Build an executable
   ./main                          // Run the built executable

2. Testing Commands:
   go test ./...                   // Run all tests in all packages
   go test ./internal/deck         // Run tests in specific package
   go test -v ./...               // Verbose output (shows each test)
   go test -cover ./...           // Show test coverage
   go test -coverprofile=coverage.out ./...  // Generate coverage file
   go tool cover -html=coverage.out          // View coverage in browser

3. Module Commands:
   go mod init blackjack          // Initialize a new module
   go mod tidy                    // Clean up dependencies
   go get package_name            // Add a new dependency
   go list -m all                 // List all dependencies

4. Code Quality:
   go fmt ./...                   // Format all code
   go vet ./...                   // Check for subtle problems
   go doc package_name            // View package documentation

5. Common Flags:
   -v        // Verbose output
   -race     // Check for race conditions
   -bench    // Run benchmarks
   -timeout  // Set test timeout

Example Usage in Our Project:
1. To run the game:
   go run cmd/main.go

2. To test everything:
   go test -v ./...

3. To check coverage:
   go test -cover ./...

4. To format all code:
   go fmt ./... 